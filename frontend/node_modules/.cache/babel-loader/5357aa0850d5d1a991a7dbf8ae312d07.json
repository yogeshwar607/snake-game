{"ast":null,"code":"var _jsxFileName = \"/Users/yogi/Code/pe/deep-dive-v1kasjain/projects-exercises/multiplayer-snake-game/frontend/src/Game.js\";\nimport React, { useState, useEffect } from \"react\";\nimport GameStart from \"./GameStart\";\nimport GameOver from \"./GameOver\";\nimport { randomPosition, getRowsColumns, displayGrid, useInterval, displayScore } from \"./GameHelper\";\nimport GameInput from \"./GameInput\";\nimport { subscribeToTimer } from './Api';\n\nconst Game = () => {\n  const height = 20;\n  const width = 20;\n  const grid = getRowsColumns(height, width);\n  const [rows, setRows] = useState(grid);\n  const [snake, setSnake] = useState([{\n    x: 0,\n    y: 0\n  }]);\n  const [food, setFood] = useState(randomPosition(width, height));\n  const [direction, setDirection] = useState('right');\n  const [startGame, setStartGame] = useState(true);\n  const [speed, setSpeed] = useState(220);\n  const [alive, setAlive] = useState(true);\n  const [score, setScore] = useState(0);\n  const [timestamp, setTimestamp] = useState('no timestamp yet'); // useEffect(() => {\n  //   const [body] = document.getElementsByTagName('body');\n  //   handleGameInput(body);\n  // }, [direction]);\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", ({\n      key\n    }) => GameInput(key, direction, setDirection));\n    subscribeToTimer((err, timestamp) => {\n      if (err) {\n        console.log(err);\n      }\n\n      setTimestamp(timestamp);\n    }); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", GameInput);\n    };\n  }, [direction, setDirection]);\n\n  const setSnakeFoodInGrid = () => {\n    const newRows = grid;\n    snake.forEach(cell => {\n      newRows[cell.x][cell.y] = 'snake';\n    });\n    newRows[food.x][food.y] = 'food';\n    setRows(newRows);\n  };\n\n  const moveSnake = () => {\n    if (!startGame) {\n      const newSnake = [];\n\n      switch (direction) {\n        case 'right':\n          if (snake[0].y + 1 >= width) {\n            setSpeed(null);\n            setAlive(false);\n          } else {\n            newSnake.push({\n              x: snake[0].x,\n              y: snake[0].y + 1\n            });\n          }\n\n          break;\n\n        case 'left':\n          if (snake[0].y - 1 < 0) {\n            setSpeed(null);\n            setAlive(false);\n          } else {\n            newSnake.push({\n              x: snake[0].x,\n              y: snake[0].y - 1\n            });\n          }\n\n          break;\n\n        case 'top':\n          if (snake[0].x - 1 < 0) {\n            setSpeed(null);\n            setAlive(false);\n          } else {\n            newSnake.push({\n              x: (snake[0].x - 1 + height) % height,\n              y: snake[0].y\n            });\n          }\n\n          break;\n\n        case 'bottom':\n          if (snake[0].x + 1 >= height) {\n            setSpeed(null);\n            setAlive(false);\n          } else {\n            newSnake.push({\n              x: (snake[0].x + 1) % height,\n              y: snake[0].y\n            });\n          }\n\n      }\n\n      snake.forEach(cell => {\n        newSnake.push(cell);\n      });\n\n      if (snake[0].x === food.x && snake[0].y === food.y) {\n        setFood(randomPosition(width, height));\n      } else {\n        newSnake.pop();\n      }\n\n      setScore(snake.length);\n      console.log(newSnake);\n      setSnake(newSnake);\n      setSnakeFoodInGrid();\n    }\n  };\n\n  useInterval(moveSnake, speed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'mainGrid',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, displayScore(score), `This is the timer value: ${timestamp}`, startGame ? GameStart(startGame, setStartGame, setSpeed) : displayGrid(rows), GameOver(alive));\n};\n\nexport default Game;","map":{"version":3,"sources":["/Users/yogi/Code/pe/deep-dive-v1kasjain/projects-exercises/multiplayer-snake-game/frontend/src/Game.js"],"names":["React","useState","useEffect","GameStart","GameOver","randomPosition","getRowsColumns","displayGrid","useInterval","displayScore","GameInput","subscribeToTimer","Game","height","width","grid","rows","setRows","snake","setSnake","x","y","food","setFood","direction","setDirection","startGame","setStartGame","speed","setSpeed","alive","setAlive","score","setScore","timestamp","setTimestamp","window","addEventListener","key","err","console","log","removeEventListener","setSnakeFoodInGrid","newRows","forEach","cell","moveSnake","newSnake","push","pop","length"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport GameStart from \"./GameStart\";\nimport GameOver from \"./GameOver\";\nimport { randomPosition, getRowsColumns, displayGrid, useInterval, displayScore } from \"./GameHelper\";\nimport GameInput from \"./GameInput\";\nimport { subscribeToTimer } from './Api';\n\n\nconst Game = () => {\n  const height = 20;\n  const width = 20;\n  const grid = getRowsColumns(height, width);\n\n\n  const [rows, setRows] = useState(grid);\n  const [snake, setSnake] = useState([{x:0,y:0}]);\n  const [food, setFood] = useState(randomPosition(width, height));\n  const [direction, setDirection] = useState('right');\n  const [startGame, setStartGame] = useState(true);\n  const [speed, setSpeed] = useState(220);\n  const [alive, setAlive] = useState(true);\n  const [score, setScore] = useState(0);\n  const [timestamp, setTimestamp] = useState('no timestamp yet');\n  \n\n\n  // useEffect(() => {\n  //   const [body] = document.getElementsByTagName('body');\n  //   handleGameInput(body);\n  // }, [direction]);\n  useEffect(() => {\n    window.addEventListener(\"keydown\", ({key})=>GameInput(key, direction, setDirection));\n    subscribeToTimer((err, timestamp) => {\n      if (err) {\n        console.log(err)\n      }\n      setTimestamp(timestamp)\n    });\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", GameInput);\n    };\n  },[direction, setDirection]);\n\n  const setSnakeFoodInGrid = () => {\n    const newRows = grid;\n    snake.forEach(cell => {\n      newRows[cell.x][cell.y] = 'snake';\n    });\n\n    newRows[food.x][food.y] = 'food';\n    setRows(newRows);\n  };\n\n\n  const moveSnake = () => {\n    if (!startGame) {\n      const newSnake = [];\n      switch (direction) {\n        case 'right':\n          if (snake[0].y + 1 >= width) {\n            setSpeed(null);\n            setAlive(false)\n          } else {\n            newSnake.push({x: snake[0].x, y: (snake[0].y + 1)});\n          }\n          break;\n        case 'left':\n          if (snake[0].y - 1  < 0) {\n            setSpeed(null);\n            setAlive(false)\n          } else {\n            newSnake.push({x: snake[0].x, y: (snake[0].y - 1)});\n          }\n          break;\n        case 'top':\n          if (snake[0].x - 1 < 0) {\n            setSpeed(null);\n            setAlive(false)\n          } else {\n            newSnake.push({x: (snake[0].x - 1 + height) % height, y: snake[0].y});\n          }\n          break;\n        case 'bottom':\n          if (snake[0].x + 1 >= height) {\n            setSpeed(null);\n            setAlive(false)\n          } else {\n            newSnake.push({x: (snake[0].x + 1) % height, y: snake[0].y})\n          }\n      }\n      snake.forEach(cell => {\n        newSnake.push(cell);\n      });\n\n      if (snake[0].x === food.x && snake[0].y === food.y) {\n        setFood(randomPosition(width, height));\n      } else {\n        newSnake.pop();\n      }\n      setScore(snake.length);\n      console.log(newSnake);\n      setSnake(newSnake);\n      setSnakeFoodInGrid();\n    }\n\n  };\n\n  useInterval(moveSnake, speed);\n\n  return (<div className={'mainGrid'}>\n    { displayScore(score)}\n    {`This is the timer value: ${timestamp}` }\n    { startGame ? GameStart(startGame, setStartGame, setSpeed ) : displayGrid(rows) }\n    {GameOver(alive)}\n  </div>)\n};\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}