{"ast":null,"code":"var _jsxFileName = \"/Users/yogi/Code/pe/deep-dive-v1kasjain/projects-exercises/multiplayer-snake-game/frontend/src/canvas.js\";\nimport React, { useEffect, useRef } from 'react';\nconst color = '#263012';\n\nconst drawSingleBlock = (ctx, startX, startY, width, height, color) => {\n  //ctx.save();\n  ctx.fillStyle = color;\n  console.log(`${startX},  ${startY}, ${width}, ${height}`);\n  ctx.fillRect(startX, startY, width, height); //ctx.restore();\n};\n\nconst drawSnake = (snake, canvasRef) => {\n  const canvas = canvasRef.current;\n  const canvasOptions = {};\n  canvasOptions.context = canvas.getContext('2d');\n  const snakeData = snake;\n  const width = 500;\n  const height = 500;\n\n  for (let j = 0; j < snakeData.length; j += 1) {\n    if (snakeData[j]) {\n      const x = snakeData[j]['x'];\n      const y = snakeData[j]['y']; //console.log(`height => ${barHeight}, width => ${barSize} x => ${x} y => ${y}`);\n\n      drawSingleBlock(canvasOptions.context, x * 20, y * 20, 20, 20, color);\n    }\n  }\n};\n\nconst SnakeCanvas = ({\n  snake,\n  food\n}) => {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const canvasOptions = {};\n    canvasOptions.context = canvas.getContext('2d');\n    canvasOptions.context.clearRect(0, 0, 500, 500);\n    drawSnake(snake, canvasRef);\n    drawSingleBlock(canvasOptions.context, food.x * 20, food.y * 20, 30, 30, color);\n  }, [snake]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    className: \"canvas-bar\",\n    ref: canvasRef,\n    width: 400,\n    height: 400,\n    style: {\n      border: \"1px solid #263012\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default SnakeCanvas;","map":{"version":3,"sources":["/Users/yogi/Code/pe/deep-dive-v1kasjain/projects-exercises/multiplayer-snake-game/frontend/src/canvas.js"],"names":["React","useEffect","useRef","color","drawSingleBlock","ctx","startX","startY","width","height","fillStyle","console","log","fillRect","drawSnake","snake","canvasRef","canvas","current","canvasOptions","context","getContext","snakeData","j","length","x","y","SnakeCanvas","food","clearRect","border"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,MAAMC,KAAK,GAAG,SAAd;;AACA,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCN,KAArC,KAA+C;AACrE;AACAE,EAAAA,GAAG,CAACK,SAAJ,GAAgBP,KAAhB;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAa,GAAEN,MAAO,MAAKC,MAAO,KAAIC,KAAM,KAAIC,MAAO,EAAvD;AACAJ,EAAAA,GAAG,CAACQ,QAAJ,CAAaP,MAAb,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoCC,MAApC,EAJqE,CAKrE;AACD,CAND;;AAQA,MAAMK,SAAS,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACtC,QAAMC,MAAM,GAAGD,SAAS,CAACE,OAAzB;AACA,QAAMC,aAAa,GAAG,EAAtB;AACAA,EAAAA,aAAa,CAACC,OAAd,GAAwBH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAxB;AACA,QAAMC,SAAS,GAAGP,KAAlB;AACA,QAAMP,KAAK,GAAG,GAAd;AACA,QAAMC,MAAM,GAAG,GAAf;;AAGA,OAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;AAC5C,QAAID,SAAS,CAACC,CAAD,CAAb,EAAkB;AAChB,YAAME,CAAC,GAAGH,SAAS,CAACC,CAAD,CAAT,CAAa,GAAb,CAAV;AACA,YAAMG,CAAC,GAAGJ,SAAS,CAACC,CAAD,CAAT,CAAa,GAAb,CAAV,CAFgB,CAGhB;;AACAnB,MAAAA,eAAe,CAACe,aAAa,CAACC,OAAf,EAAwBK,CAAC,GAAG,EAA5B,EAAgCC,CAAC,GAAG,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgDvB,KAAhD,CAAf;AACD;AACF;AACF,CAjBD;;AAmBA,MAAMwB,WAAW,GAAG,CAAC;AAAEZ,EAAAA,KAAF;AAASa,EAAAA;AAAT,CAAD,KAAqB;AACvC,QAAMZ,SAAS,GAAGd,MAAM,CAAC,IAAD,CAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,MAAM,GAAGD,SAAS,CAACE,OAAzB;AACA,UAAMC,aAAa,GAAG,EAAtB;AACAA,IAAAA,aAAa,CAACC,OAAd,GAAwBH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAxB;AACAF,IAAAA,aAAa,CAACC,OAAd,CAAsBS,SAAtB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,GAAtC,EAA2C,GAA3C;AACAf,IAAAA,SAAS,CAACC,KAAD,EAAQC,SAAR,CAAT;AACAZ,IAAAA,eAAe,CAACe,aAAa,CAACC,OAAf,EAAwBQ,IAAI,CAACH,CAAL,GAAS,EAAjC,EAAqCG,IAAI,CAACF,CAAL,GAAS,EAA9C,EAAkD,EAAlD,EAAsD,EAAtD,EAA0DvB,KAA1D,CAAf;AACD,GAPQ,EAON,CAACY,KAAD,CAPM,CAAT;AASA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,GAAG,EAAEC,SAApC;AAA+C,IAAA,KAAK,EAAE,GAAtD;AAA2D,IAAA,MAAM,EAAE,GAAnE;AAAwE,IAAA,KAAK,EAAE;AAACc,MAAAA,MAAM,EAAE;AAAT,KAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAjBD;;AAmBA,eAAeH,WAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nconst color = '#263012';\nconst drawSingleBlock = (ctx, startX, startY, width, height, color) => {\n  //ctx.save();\n  ctx.fillStyle = color;\n  console.log(`${startX},  ${startY}, ${width}, ${height}`);\n  ctx.fillRect(startX, startY, width, height);\n  //ctx.restore();\n};\n\nconst drawSnake = (snake, canvasRef) => {\n  const canvas = canvasRef.current;\n  const canvasOptions = {};\n  canvasOptions.context = canvas.getContext('2d');\n  const snakeData = snake;\n  const width = 500;\n  const height = 500;\n\n  \n  for (let j = 0; j < snakeData.length; j += 1) {\n    if (snakeData[j]) {\n      const x = snakeData[j]['x'];\n      const y = snakeData[j]['y'];\n      //console.log(`height => ${barHeight}, width => ${barSize} x => ${x} y => ${y}`);\n      drawSingleBlock(canvasOptions.context, x * 20, y * 20, 20, 20, color);\n    }\n  }\n};\n\nconst SnakeCanvas = ({ snake, food }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const canvasOptions = {};\n    canvasOptions.context = canvas.getContext('2d');\n    canvasOptions.context.clearRect(0, 0, 500, 500);\n    drawSnake(snake, canvasRef);\n    drawSingleBlock(canvasOptions.context, food.x * 20, food.y * 20, 30, 30, color);\n  }, [snake]);\n\n  return (\n    <div>\n      <canvas className='canvas-bar' ref={canvasRef} width={400} height={400} style={{border: \"1px solid #263012\"}}/>\n    </div>\n  );\n};\n\nexport default SnakeCanvas;\n"]},"metadata":{},"sourceType":"module"}