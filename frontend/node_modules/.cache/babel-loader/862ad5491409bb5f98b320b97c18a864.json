{"ast":null,"code":"var _jsxFileName = \"/Users/yogi/Code/pe/deep-dive-v1kasjain/projects-exercises/multiplayer-snake-game/frontend/src/GameHelper.js\";\nimport React, { useEffect, useRef } from \"react\";\n\nconst randomPosition = (width, height) => {\n  const position = {\n    x: Math.floor(Math.random() * width),\n    y: Math.floor(Math.random() * height)\n  };\n  return position;\n};\n\nconst getRowsColumns = (height, width) => {\n  let initRows = [];\n\n  for (let i = 0; i < height; i += 1) {\n    initRows.push([]);\n\n    for (let k = 0; k < width; k += 1) {\n      initRows[i].push('blankColumn');\n    }\n  }\n\n  return initRows;\n};\n\nconst displayGrid = rowsColumns => {\n  return rowsColumns.map((row, rowIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    key: rowIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, row.map((column, i) => {\n    switch (column) {\n      case 'blankColumn':\n        return /*#__PURE__*/React.createElement(\"span\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 20\n          }\n        }, \"\\xA0\");\n\n      case 'snake':\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: 'snake',\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 20\n          }\n        }, \"\\xA0\");\n\n      case 'food':\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: 'food',\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 20\n          }\n        }, \"\\xA0\");\n    }\n  })));\n};\n\nconst displayScore = score => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'scoreBox',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  }, \"Score: \", score);\n};\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport { randomPosition, getRowsColumns, displayGrid, useInterval, displayScore };","map":{"version":3,"sources":["/Users/yogi/Code/pe/deep-dive-v1kasjain/projects-exercises/multiplayer-snake-game/frontend/src/GameHelper.js"],"names":["React","useEffect","useRef","randomPosition","width","height","position","x","Math","floor","random","y","getRowsColumns","initRows","i","push","k","displayGrid","rowsColumns","map","row","rowIndex","column","displayScore","score","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,QAAuC,OAAvC;;AAEA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,QAAMC,QAAQ,GAAG;AACfC,IAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,KAA3B,CADY;AAEfO,IAAAA,CAAC,EAAEH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,MAA3B;AAFY,GAAjB;AAIA,SAAOC,QAAP;AACD,CAND;;AAQA,MAAMM,cAAc,GAAG,CAACP,MAAD,EAASD,KAAT,KAAmB;AACxC,MAAIS,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAApB,EAA4BS,CAAC,IAAI,CAAjC,EAAoC;AAClCD,IAAAA,QAAQ,CAACE,IAAT,CAAc,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,KAApB,EAA2BY,CAAC,IAAI,CAAhC,EAAmC;AACjCH,MAAAA,QAAQ,CAACC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,aAAjB;AACD;AACF;;AACD,SAAOF,QAAP;AACD,CATD;;AAWA,MAAMI,WAAW,GAAIC,WAAD,IAAiB;AACnC,SAAOA,WAAW,CAACC,GAAZ,CAAgB,CAACC,GAAD,EAAMC,QAAN,kBACrB;AAAK,IAAA,GAAG,EAAEA,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,GAAG,CAACD,GAAJ,CAAQ,CAACG,MAAD,EAASR,CAAT,KAAe;AACtB,YAAQQ,MAAR;AACE,WAAK,aAAL;AACE,4BAAO;AAAM,UAAA,GAAG,EAAER,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AACF,WAAK,OAAL;AACE,4BAAO;AAAM,UAAA,SAAS,EAAE,OAAjB;AAA0B,UAAA,GAAG,EAAEA,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AACF,WAAK,MAAL;AACE,4BAAO;AAAM,UAAA,SAAS,EAAE,MAAjB;AAAyB,UAAA,GAAG,EAAEA,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AANJ;AAQD,GATA,CADH,CADK,CAAP;AAeD,CAhBD;;AAkBA,MAAMS,YAAY,GAAIC,KAAD,IAAW;AAC9B,sBAAO;AAAK,IAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAoCA,KAApC,CAAP;AACD,CAFD;;AAIA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsC;AACpC,QAAMC,aAAa,GAAG1B,MAAM,EAA5B,CADoC,CAGpC;;AACAD,EAAAA,SAAS,CACP,MAAM;AACJ2B,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACD,GAHM,EAIP,CAACA,QAAD,CAJO,CAAT,CAJoC,CAWpC;;AACAzB,EAAAA,SAAS,CACP,MAAM;AACJ,aAAS6B,IAAT,GAAgB;AACdF,MAAAA,aAAa,CAACC,OAAd;AACD;;AACD,QAAIF,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAII,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOH,KAAP,CAApB;AACA,aAAO,MAAMM,aAAa,CAACF,EAAD,CAA1B;AACD;AACF,GATM,EAUP,CAACJ,KAAD,CAVO,CAAT;AAYD;;AAED,SACExB,cADF,EAEES,cAFF,EAGEK,WAHF,EAIEQ,WAJF,EAKEF,YALF","sourcesContent":["import React, {useEffect, useRef} from \"react\";\n\nconst randomPosition = (width, height) => {\n  const position = {\n    x: Math.floor(Math.random() * width),\n    y: Math.floor(Math.random() * height)\n  };\n  return position;\n};\n\nconst getRowsColumns = (height, width) => {\n  let initRows = [];\n  for (let i = 0; i < height; i += 1) {\n    initRows.push([]);\n    for (let k = 0; k < width; k += 1) {\n      initRows[i].push('blankColumn');\n    }\n  }\n  return initRows;\n};\n\nconst displayGrid = (rowsColumns) => {\n  return rowsColumns.map((row, rowIndex) =>\n    <div key={rowIndex}>\n      {row.map((column, i) => {\n        switch (column) {\n          case 'blankColumn':\n            return <span key={i}>&nbsp;</span>;\n          case 'snake':\n            return <span className={'snake'} key={i}>&nbsp;</span>;\n          case 'food':\n            return <span className={'food'} key={i}>&nbsp;</span>\n        }\n      })\n      }\n    </div>\n  );\n};\n\nconst displayScore = (score) => {\n  return <div className={'scoreBox'}>Score: {score}</div>\n};\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(\n    () => {\n      savedCallback.current = callback;\n    },\n    [callback]\n  );\n\n  // Set up the interval.\n  useEffect(\n    () => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    },\n    [delay]\n  );\n}\n\nexport {\n  randomPosition,\n  getRowsColumns,\n  displayGrid,\n  useInterval,\n  displayScore\n}\n"]},"metadata":{},"sourceType":"module"}